from rest_framework import serializers
from django.contrib.auth.models import User
from .models import Tutor, Student
from django.contrib.auth import authenticate
from rest_framework_simplejwt.tokens import RefreshToken

class RegisterSerializer(serializers.ModelSerializer):
    class Meta:
        model = User    
        fields = ('id','username', 'password', 'email')
        extra_kwargs = {'password': {'write_only': True}}

    def create(self, validated_data):
        user = User.objects.create_user(**validated_data)
        return user

class LoginSerializer(serializers.Serializer):
    username = serializers.CharField()
    password = serializers.CharField()

    def validate(self, data):
        user = authenticate(**data)
        if user and user.is_active:
            return user
        raise serializers.ValidationError("Invalid credentials")

#For the info of the user
class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ['id', 'username']  # Include 'id' and other fields as needed
        
# Tutor Serializer
class TutorSerializer(serializers.ModelSerializer):
    class Meta:
        model = Tutor
        fields = ['fullname', 'email', 'password', 'confirm_password']

    def create(self, validated_data):
        user = Tutor.objects.create_user(
            fullname=validated_data['fullname'],
            email=validated_data['email'],
            password=validated_data['password']
        )
        return user

# Student Serializer
class StudentSerializer(serializers.ModelSerializer):
    class Meta:
        model = Student
        fields = ['fullname', 'email', 'address', 'contact', 'age', 'document', 'cover_letter']

    def create(self, validated_data):
        student = Student.objects.create(
            **validated_data
        )
        return student